
/*private static boolean isOneLetterDifference(String currentWord, String word) {
        // Check if two words are one letter apart
        int count = 0;
        for (int i = 0; i < currentWord.length(); i++) {
            if (currentWord.charAt(i) != word.charAt(i)) {
                count++;
            }
        }
        return count == 1;
    }*/

/*
    private static void breadthFirstSearch(HashMap<String,WordNode> wordlist, String start, String end) {
        Set <String> visited = new HashSet<String>();
        Set <String> set = new HashSet<String>(wordlist.keySet());
        Queue <WordNode> queue = new LinkedList<WordNode>();
        WordNode node = wordlist.get(start);
        queue.add(node);
        visited.add(start);

        while (!queue.isEmpty()) {
            WordNode current = queue.remove();
            String currentWord = current.getWord();
            if (currentWord.equals(end)) {
                System.out.println("Found a path from " + start + " to " + end);
                return;
            }
            for (String word : set) {
                if (isWord(wordlist, word) && !visited.contains(word) && isOneLetterDifference(currentWord, word)) {
                    WordNode next = wordlist.get(word);
                    current.addNeighbor(next);
                    queue.add(next);
                    visited.add(word);
                }

            }

        }
        System.out.println("No path found from " + start + " to " + end);
    }*/



    /*private static void breadthFirstSearch(HashMap<String,WordNode> wordlist, String start, String end) {
        // Search the graph
        Set <String> dict = wordlist.keySet();
        if (!dict.contains(end)) {
            return;
        }

        Set <String> beginSet = new HashSet<String>();
        Set <String> endSet = new HashSet<String>();

        beginSet.add(start);
        endSet.add(end);

        int step = 1;
        Set <String> visited = new HashSet<String>();
        while(!beginSet.isEmpty() && !endSet.isEmpty()) {
            if (beginSet.size() > endSet.size()) {
                Set <String> temp = beginSet;
                beginSet = endSet;
                endSet = temp;
            }
            Set <String> neighbours = new HashSet<String>();
            for (String word : beginSet) {
                char[] chs = word.toCharArray();
                for (int i = 0; i < chs.length; i++) {
                    char old = chs[i];
                    for (char c = 'a'; c <= 'z'; c++) {
                        chs[i] = c;
                        String target = new String(chs);
                        if (endSet.contains(target)) {
                            System.out.println(chs[i]+"->"+target);
                        }
                        if (dict.contains(target) && !visited.contains(target)) {
                            neighbours.add(target);
                            visited.add(target);
                        }
                    }
                    chs[i] = old;
                }
            }
            beginSet = neighbours;
            step++;
        }

        return;
    }*/

/*private static boolean isWord(String word) {
        // Check if a word is in the graph
        return wordlist.containsKey(word);

        return word.length() > 0;
    }*/